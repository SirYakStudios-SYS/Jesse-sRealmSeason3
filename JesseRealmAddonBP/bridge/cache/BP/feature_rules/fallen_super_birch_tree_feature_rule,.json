{
	"file_path": "C:\\Users\\239168\\AppData\\Local\\Packages\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\LocalState\\games\\com.mojang\\development_behavior_packs\\Biome Revamp DAT\\feature_rules\\fallen_super_birch_tree_feature_rule,.json",
	"file_type": "feature_rule",
	"format_version": 1,
	"file_uuid": "aba8ef49_b954_4e32_8edb_e091bf305334",
	"file_version": 0,
	"cache_content": {
		"children": [
			{
				"data": "1.16.0",
				"key": "format_version"
			},
			{
				"open": {
					"format_version": "1.16.0",
					"minecraft:feature_rules": {
						"description": {
							"identifier": "mv:fallen_super_birch_tree_feature_rule",
							"places_feature": "minecraft:fallen_super_birch_tree_feature"
						},
						"conditions": {
							"placement_pass": "surface_pass",
							"minecraft:biome_filter": [
								{
									"test": "has_biome_tag",
									"operator": "==",
									"value": "revamped_birch"
								},
								{
									"test": "has_biome_tag",
									"operator": "==",
									"value": "birch"
								}
							]
						},
						"distribution": {
							"iterations": "math.clamp(math.trunc(math.ceil((query.noise(math.trunc(variable.originx / 5), math.trunc(variable.originz / 2.5)) + 0.1) * 2.5)), 1, 5)",
							"x": {
								"distribution": "uniform",
								"extent": [
									0,
									16
								]
							},
							"y": "query.heightmap(variable.worldx, variable.worldz)",
							"z": {
								"distribution": "uniform",
								"extent": [
									0,
									16
								]
							}
						}
					}
				},
				"key": "minecraft:feature_rules",
				"children": [
					{
						"open": {
							"description": {
								"identifier": "mv:fallen_super_birch_tree_feature_rule",
								"places_feature": "minecraft:fallen_super_birch_tree_feature"
							},
							"conditions": {
								"placement_pass": "surface_pass",
								"minecraft:biome_filter": [
									{
										"test": "has_biome_tag",
										"operator": "==",
										"value": "revamped_birch"
									},
									{
										"test": "has_biome_tag",
										"operator": "==",
										"value": "birch"
									}
								]
							},
							"distribution": {
								"iterations": "math.clamp(math.trunc(math.ceil((query.noise(math.trunc(variable.originx / 5), math.trunc(variable.originz / 2.5)) + 0.1) * 2.5)), 1, 5)",
								"x": {
									"distribution": "uniform",
									"extent": [
										0,
										16
									]
								},
								"y": "query.heightmap(variable.worldx, variable.worldz)",
								"z": {
									"distribution": "uniform",
									"extent": [
										0,
										16
									]
								}
							}
						},
						"key": "description",
						"is_minified": true,
						"children": {
							"identifier": "mv:fallen_super_birch_tree_feature_rule",
							"places_feature": "minecraft:fallen_super_birch_tree_feature"
						}
					},
					{
						"open": {
							"description": {
								"identifier": "mv:fallen_super_birch_tree_feature_rule",
								"places_feature": "minecraft:fallen_super_birch_tree_feature"
							},
							"conditions": {
								"placement_pass": "surface_pass",
								"minecraft:biome_filter": [
									{
										"test": "has_biome_tag",
										"operator": "==",
										"value": "revamped_birch"
									},
									{
										"test": "has_biome_tag",
										"operator": "==",
										"value": "birch"
									}
								]
							},
							"distribution": {
								"iterations": "math.clamp(math.trunc(math.ceil((query.noise(math.trunc(variable.originx / 5), math.trunc(variable.originz / 2.5)) + 0.1) * 2.5)), 1, 5)",
								"x": {
									"distribution": "uniform",
									"extent": [
										0,
										16
									]
								},
								"y": "query.heightmap(variable.worldx, variable.worldz)",
								"z": {
									"distribution": "uniform",
									"extent": [
										0,
										16
									]
								}
							}
						},
						"key": "conditions",
						"children": [
							{
								"data": "surface_pass",
								"key": "placement_pass"
							},
							{
								"open": {
									"placement_pass": "surface_pass",
									"minecraft:biome_filter": [
										{
											"test": "has_biome_tag",
											"operator": "==",
											"value": "revamped_birch"
										},
										{
											"test": "has_biome_tag",
											"operator": "==",
											"value": "birch"
										}
									]
								},
								"key": "minecraft:biome_filter",
								"children": [
									{
										"open": [
											{
												"test": "has_biome_tag",
												"operator": "==",
												"value": "revamped_birch"
											},
											{
												"test": "has_biome_tag",
												"operator": "==",
												"value": "birch"
											}
										],
										"is_minified": true,
										"children": {
											"test": "has_biome_tag",
											"operator": "==",
											"value": "revamped_birch"
										}
									},
									{
										"is_minified": true,
										"children": {
											"test": "has_biome_tag",
											"operator": "==",
											"value": "birch"
										}
									}
								]
							}
						]
					},
					{
						"open": {
							"description": {
								"identifier": "mv:fallen_super_birch_tree_feature_rule",
								"places_feature": "minecraft:fallen_super_birch_tree_feature"
							},
							"conditions": {
								"placement_pass": "surface_pass",
								"minecraft:biome_filter": [
									{
										"test": "has_biome_tag",
										"operator": "==",
										"value": "revamped_birch"
									},
									{
										"test": "has_biome_tag",
										"operator": "==",
										"value": "birch"
									}
								]
							},
							"distribution": {
								"iterations": "math.clamp(math.trunc(math.ceil((query.noise(math.trunc(variable.originx / 5), math.trunc(variable.originz / 2.5)) + 0.1) * 2.5)), 1, 5)",
								"x": {
									"distribution": "uniform",
									"extent": [
										0,
										16
									]
								},
								"y": "query.heightmap(variable.worldx, variable.worldz)",
								"z": {
									"distribution": "uniform",
									"extent": [
										0,
										16
									]
								}
							}
						},
						"key": "distribution",
						"is_minified": true,
						"children": {
							"iterations": "math.clamp(math.trunc(math.ceil((query.noise(math.trunc(variable.originx / 5), math.trunc(variable.originz / 2.5)) + 0.1) * 2.5)), 1, 5)",
							"x": {
								"distribution": "uniform",
								"extent": [
									0,
									16
								]
							},
							"y": "query.heightmap(variable.worldx, variable.worldz)",
							"z": {
								"distribution": "uniform",
								"extent": [
									0,
									16
								]
							}
						}
					}
				]
			}
		]
	}
}